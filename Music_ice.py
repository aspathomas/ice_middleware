# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.8
#
# <auto-generated>
#
# Generated from file `Music.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Demo
_M_Demo = Ice.openModule('Demo')
__name__ = 'Demo'

if '_t_listMusique' not in _M_Demo.__dict__:
    _M_Demo._t_listMusique = IcePy.defineSequence('::Demo::listMusique', (), IcePy._t_string)

if '_t_byteSeq' not in _M_Demo.__dict__:
    _M_Demo._t_byteSeq = IcePy.defineSequence('::Demo::byteSeq', (), IcePy._t_byte)

_M_Demo._t_Music = IcePy.defineValue('::Demo::Music', Ice.Value, -1, (), False, True, None, ())

if 'MusicPrx' not in _M_Demo.__dict__:
    _M_Demo.MusicPrx = Ice.createTempClass()
    class MusicPrx(Ice.ObjectPrx):

        def sayHello(self, delay, context=None):
            return _M_Demo.Music._op_sayHello.invoke(self, ((delay, ), context))

        def sayHelloAsync(self, delay, context=None):
            return _M_Demo.Music._op_sayHello.invokeAsync(self, ((delay, ), context))

        def begin_sayHello(self, delay, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Music._op_sayHello.begin(self, ((delay, ), _response, _ex, _sent, context))

        def end_sayHello(self, _r):
            return _M_Demo.Music._op_sayHello.end(self, _r)

        def sendMusicPart(self, id, part, context=None):
            return _M_Demo.Music._op_sendMusicPart.invoke(self, ((id, part), context))

        def sendMusicPartAsync(self, id, part, context=None):
            return _M_Demo.Music._op_sendMusicPart.invokeAsync(self, ((id, part), context))

        def begin_sendMusicPart(self, id, part, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Music._op_sendMusicPart.begin(self, ((id, part), _response, _ex, _sent, context))

        def end_sendMusicPart(self, _r):
            return _M_Demo.Music._op_sendMusicPart.end(self, _r)

        def uploadMusic(self, id, filename, context=None):
            return _M_Demo.Music._op_uploadMusic.invoke(self, ((id, filename), context))

        def uploadMusicAsync(self, id, filename, context=None):
            return _M_Demo.Music._op_uploadMusic.invokeAsync(self, ((id, filename), context))

        def begin_uploadMusic(self, id, filename, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Music._op_uploadMusic.begin(self, ((id, filename), _response, _ex, _sent, context))

        def end_uploadMusic(self, _r):
            return _M_Demo.Music._op_uploadMusic.end(self, _r)

        def playMusic(self, musicName, context=None):
            return _M_Demo.Music._op_playMusic.invoke(self, ((musicName, ), context))

        def playMusicAsync(self, musicName, context=None):
            return _M_Demo.Music._op_playMusic.invokeAsync(self, ((musicName, ), context))

        def begin_playMusic(self, musicName, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Music._op_playMusic.begin(self, ((musicName, ), _response, _ex, _sent, context))

        def end_playMusic(self, _r):
            return _M_Demo.Music._op_playMusic.end(self, _r)

        def stopMusic(self, context=None):
            return _M_Demo.Music._op_stopMusic.invoke(self, ((), context))

        def stopMusicAsync(self, context=None):
            return _M_Demo.Music._op_stopMusic.invokeAsync(self, ((), context))

        def begin_stopMusic(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Music._op_stopMusic.begin(self, ((), _response, _ex, _sent, context))

        def end_stopMusic(self, _r):
            return _M_Demo.Music._op_stopMusic.end(self, _r)

        def delete(self, musicName, context=None):
            return _M_Demo.Music._op_delete.invoke(self, ((musicName, ), context))

        def deleteAsync(self, musicName, context=None):
            return _M_Demo.Music._op_delete.invokeAsync(self, ((musicName, ), context))

        def begin_delete(self, musicName, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Music._op_delete.begin(self, ((musicName, ), _response, _ex, _sent, context))

        def end_delete(self, _r):
            return _M_Demo.Music._op_delete.end(self, _r)

        def searchMusic(self, titre, context=None):
            return _M_Demo.Music._op_searchMusic.invoke(self, ((titre, ), context))

        def searchMusicAsync(self, titre, context=None):
            return _M_Demo.Music._op_searchMusic.invokeAsync(self, ((titre, ), context))

        def begin_searchMusic(self, titre, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Music._op_searchMusic.begin(self, ((titre, ), _response, _ex, _sent, context))

        def end_searchMusic(self, _r):
            return _M_Demo.Music._op_searchMusic.end(self, _r)

        def getNewIndex(self, context=None):
            return _M_Demo.Music._op_getNewIndex.invoke(self, ((), context))

        def getNewIndexAsync(self, context=None):
            return _M_Demo.Music._op_getNewIndex.invokeAsync(self, ((), context))

        def begin_getNewIndex(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Music._op_getNewIndex.begin(self, ((), _response, _ex, _sent, context))

        def end_getNewIndex(self, _r):
            return _M_Demo.Music._op_getNewIndex.end(self, _r)

        def shutdown(self, context=None):
            return _M_Demo.Music._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            return _M_Demo.Music._op_shutdown.invokeAsync(self, ((), context))

        def begin_shutdown(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Music._op_shutdown.begin(self, ((), _response, _ex, _sent, context))

        def end_shutdown(self, _r):
            return _M_Demo.Music._op_shutdown.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.MusicPrx.ice_checkedCast(proxy, '::Demo::Music', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.MusicPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::Music'
    _M_Demo._t_MusicPrx = IcePy.defineProxy('::Demo::Music', MusicPrx)

    _M_Demo.MusicPrx = MusicPrx
    del MusicPrx

    _M_Demo.Music = Ice.createTempClass()
    class Music(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::Music', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::Music'

        @staticmethod
        def ice_staticId():
            return '::Demo::Music'

        def sayHello(self, delay, current=None):
            raise NotImplementedError("servant method 'sayHello' not implemented")

        def sendMusicPart(self, id, part, current=None):
            raise NotImplementedError("servant method 'sendMusicPart' not implemented")

        def uploadMusic(self, id, filename, current=None):
            raise NotImplementedError("servant method 'uploadMusic' not implemented")

        def playMusic(self, musicName, current=None):
            raise NotImplementedError("servant method 'playMusic' not implemented")

        def stopMusic(self, current=None):
            raise NotImplementedError("servant method 'stopMusic' not implemented")

        def delete(self, musicName, current=None):
            raise NotImplementedError("servant method 'delete' not implemented")

        def searchMusic(self, titre, current=None):
            raise NotImplementedError("servant method 'searchMusic' not implemented")

        def getNewIndex(self, current=None):
            raise NotImplementedError("servant method 'getNewIndex' not implemented")

        def shutdown(self, current=None):
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_MusicDisp)

        __repr__ = __str__

    _M_Demo._t_MusicDisp = IcePy.defineClass('::Demo::Music', Music, (), None, ())
    Music._ice_type = _M_Demo._t_MusicDisp

    Music._op_sayHello = IcePy.Operation('sayHello', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Music._op_sendMusicPart = IcePy.Operation('sendMusicPart', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_Demo._t_byteSeq, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    Music._op_uploadMusic = IcePy.Operation('uploadMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    Music._op_playMusic = IcePy.Operation('playMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    Music._op_stopMusic = IcePy.Operation('stopMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    Music._op_delete = IcePy.Operation('delete', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    Music._op_searchMusic = IcePy.Operation('searchMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Demo._t_listMusique, False, 0), ())
    Music._op_getNewIndex = IcePy.Operation('getNewIndex', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    Music._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Demo.Music = Music
    del Music

# End of module Demo
